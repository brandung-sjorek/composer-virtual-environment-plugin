<?php

/*
 * This file is part of Composer Virtual Environment Plugin.
 *
 * (c) Stephan Jorek <stephan.jorek@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sjorek\Composer\VirtualEnvironment\Processor\GitHook;

use Sjorek\Composer\VirtualEnvironment\Processor\ExecutableFromTemplateTrait;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * @author Stephan Jorek <stephan.jorek@gmail.com>
 */
class ScriptProcessor extends AbstractProcessor
{
    use ExecutableFromTemplateTrait;

    const PROCESSOR_NAME = 'git-hook script';
    const SHELL_SHEBANG = "/bin/sh";
    const PHP_SHEBANG = "/usr/bin/env php";
    const SCRIPT_COMMENT = '%s git-hook generated by composer-virtual-environment-plugin';

    protected $shebang;

    /**
     * @param string      $name
     * @param string      $script
     * @param string      $baseDir
     * @param string      $gitHookDir
     * @param string|bool $shebang
     */
    public function __construct($name, $script, $baseDir, $gitHookDir = null, $shebang = null)
    {
        parent::__construct($name, $script, $baseDir, $gitHookDir);
        if ($shebang === null) {
            $this->shebang = strpos($script, '<?php') === false ? static::SHELL_SHEBANG : static::PHP_SHEBANG;
        } else {
            $this->shebang = $shebang;
        }
    }

    /**
     * {@inheritDoc}
     * @see \Sjorek\Composer\VirtualEnvironment\Processor\GitHook\AbstractProcessor::deployHook()
     */
    protected function deployHook(OutputInterface $output, $force)
    {
        return $this->deployTemplate($output, $force);
    }

    /**
     * @param OutputInterface $output
     * @param bool            $force
     */
    protected function fetchTemplate(OutputInterface $output, $force)
    {
        return empty($this->source) ? false : $this->source;
    }

    /**
     * @param  string          $content
     * @param  OutputInterface $output
     * @param  string          $force
     * @return string|bool
     */
    protected function renderTemplate($content, OutputInterface $output, $force = false)
    {
        $shebang = explode(' ', $this->shebang);
        if (!$this->filesystem->isAbsolutePath($shebang[0])) {
            $shebang[0] = $this->baseDir . DIRECTORY_SEPARATOR . $shebang[0];
        }
        $shebang[0] = $this->filesystem->normalizePath($shebang[0]);
        if (!(file_exists($shebang[0]) || is_link($shebang[0]))) {
            $output->writeln(
                sprintf(
                    '<error>The shebang executable "%s" does not exist for git-hook script: %s</error>',
                    $this->shebang,
                    $content
                ),
                OutputInterface::OUTPUT_NORMAL | OutputInterface::VERBOSITY_QUIET
            );
        }
        $shebang = implode(' ', $shebang);
        if (strpos($shebang, 'php') === false && strpos($content, '<?php') === false) {
            $content = implode(
                PHP_EOL,
                array(
                    '# ' . sprintf(static::SCRIPT_COMMENT, $this->name),
                    trim($content),
                )
            );
        } else {
            if (strpos($shebang, 'php') === false) {
                $output->writeln(
                    sprintf(
                        '<error>Missing php in shebang "%s" for php-based git-hook script: %s</error>',
                        $this->shebang,
                        $content
                    ),
                    OutputInterface::OUTPUT_NORMAL | OutputInterface::VERBOSITY_QUIET
                );
            }
            if (strpos($content, '<?php') === false) {
                $content = implode(
                    PHP_EOL,
                    array(
                        '<?php',
                        '# ' . sprintf(static::SCRIPT_COMMENT, $this->name),
                        trim($content),
                    )
                );
            } else {
                $content = explode('<?php', $content, 2);
                $content = implode(
                    '<?php',
                    array(
                        $content[0],
                        implode(
                            PHP_EOL,
                            array(
                                '',
                                '# ' . sprintf(static::SCRIPT_COMMENT, $this->name),
                                trim($content[1]),
                            )
                        ),

                    )
                );
            }
        }

        return sprintf('#!%s%s%s%s', $shebang, PHP_EOL, $content, PHP_EOL);
    }

    /**
     * {@inheritDoc}
     * @see \Sjorek\Composer\VirtualEnvironment\Processor\GitHook\AbstractProcessor::rollbackHook()
     */
    protected function rollbackHook(OutputInterface $output)
    {
        return $this->rollbackTemplate($output);
    }
}
